package gr.imsi.athenarc.xtremexpvisapi.service;


import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import gr.imsi.athenarc.xtremexpvisapi.datasource.QueryExecutor;
import gr.imsi.athenarc.xtremexpvisapi.domain.VisualColumn;
import gr.imsi.athenarc.xtremexpvisapi.domain.VisualExplainabilityResults;
import gr.imsi.athenarc.xtremexpvisapi.domain.VisualizationResults;
import gr.imsi.athenarc.xtremexpvisapi.domain.GrpcAutoGenerated.ExplanationsGrpc;
import gr.imsi.athenarc.xtremexpvisapi.domain.GrpcAutoGenerated.ExplanationsRequest;
import gr.imsi.athenarc.xtremexpvisapi.domain.GrpcAutoGenerated.ExplanationsResponse;
import gr.imsi.athenarc.xtremexpvisapi.domain.GrpcAutoGenerated.GrpcProto;
import gr.imsi.athenarc.xtremexpvisapi.domain.Query.VisualExplainabilityPipeline2DPdpQuery;
import gr.imsi.athenarc.xtremexpvisapi.domain.Query.VisualExplainabilityPipelinePdpQuery;
import gr.imsi.athenarc.xtremexpvisapi.domain.Query.VisualExplainabilityPipelinePdpQuery;

import gr.imsi.athenarc.xtremexpvisapi.domain.Query.VisualQuery;
import com.google.protobuf.util.JsonFormat;


import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

@Service
public class DataService {

    
    @Value("${app.schema.path}")
    String schemaPath = "";
    
/*
 * General Fucntions for Datas
 */

    public VisualizationResults getData(VisualQuery visualQuery) {
        VisualizationResults visualizationResults = new VisualizationResults();
        String datasetId = visualQuery.getDatasetId();

        // Print datasetId being processed
        System.out.println("Processing data for datasetId: " + datasetId);

        if (visualQuery.getFilters().contains(null)) {
            visualizationResults.setMessage("500");
            System.out.println("Warning: Null filter detected in visualQuery");
            return visualizationResults;
        }

        QueryExecutor queryExecutor = new QueryExecutor(datasetId, Path.of(schemaPath, datasetId + ".csv").toString());

        // Print executing query with visualQuery
        System.out.println("Executing query for datasetId: " + datasetId);
        return queryExecutor.executeQuery(visualQuery);
    }

    public List<VisualColumn> getColumns(String datasetId) {
        System.out.println("Retrieving columns for datasetId: " + datasetId);
        QueryExecutor queryExecutor = new QueryExecutor(datasetId, Path.of(schemaPath, datasetId + ".csv").toString());
        return queryExecutor.getColumns(datasetId);
    }

    public String getColumn(String datasetId, String columnName) {
        System.out.println("Retrieving column '" + columnName + "' for datasetId: " + datasetId);
        QueryExecutor queryExecutor = new QueryExecutor(datasetId, Path.of(schemaPath, datasetId + ".csv").toString());
        return queryExecutor.getColumn(datasetId, columnName);
    }


/*
 * Pipeline XAI Fucntions 
 */

    public VisualExplainabilityResults getPipelineExplainabilityPdpData(VisualExplainabilityPipelinePdpQuery visualExplainabilityQuery) {
        VisualExplainabilityResults visualExplainabilityResults = new VisualExplainabilityResults();
        String feature = visualExplainabilityQuery.getPipelinePdpParameters().getFeature();
        
        // Check if the feature is null
        if (feature == null) {
            visualExplainabilityResults.setMessage("400");
            System.out.println("Warning: Feature is null in visualExplainabilityQuery");
        } else {
            visualExplainabilityResults.setMessage("200");
            System.out.println("Sending gRPC request to server...");
    
            // Establish gRPC channel
            ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext() // Use plaintext (non-TLS) communication
                .build();
           
            // Create a request message
            ExplanationsRequest request = ExplanationsRequest.newBuilder()
                    .setExplanationMethod("PDPlots")
                    .setExplanationType("Pipeline")
                    .setModel(visualExplainabilityQuery.getModelId())
                    .setFeature1(feature) // Use the extracted feature
                    .build();
           
            // Create a blocking stub for the service
            ExplanationsGrpc.ExplanationsBlockingStub stub = ExplanationsGrpc.newBlockingStub(channel);
           
            // Send the request and get the response
            ExplanationsResponse response = stub.getExplanation(request);
            visualExplainabilityResults.setData("pdpvalues: " + response.getPdpValues() + ", pdphpvalues: " + response.getPdpHpValues());
            // Shutdown the channel
            channel.shutdown();
        }
        
        return visualExplainabilityResults;
    }
   
    public VisualExplainabilityResults getPipelineExplainability2DPdpData(VisualExplainabilityPipeline2DPdpQuery visualExplainabilityQuery) {
        VisualExplainabilityResults visualExplainabilityResults = new VisualExplainabilityResults();
        String feature1 = visualExplainabilityQuery.getPipelinePdpParameters().getFeature1();
        String feature2 = visualExplainabilityQuery.getPipelinePdpParameters().getFeature2();
        
        // Check if either feature1 or feature2 is null
        if (feature1 == null || feature2 == null) {
            visualExplainabilityResults.setMessage("400");
            System.out.println("Warning: One or both features are null in visualExplainabilityQuery");
        } else {
            visualExplainabilityResults.setMessage("200");
            System.out.println("Sending gRPC request to server...");
    
            // Establish gRPC channel
            ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext() // Use plaintext (non-TLS) communication
                .build();
           
            // Create a request message
            ExplanationsRequest request = ExplanationsRequest.newBuilder()
                    .setExplanationMethod("2D_PDPlots")
                    .setExplanationType("Pipeline")
                    .setModel(visualExplainabilityQuery.getModelId())
                    .setFeature1(feature1) // Use the extracted feature1
                    .setFeature2(feature2) // Use the extracted feature2
                    .build();
           
            // Create a blocking stub for the service
            ExplanationsGrpc.ExplanationsBlockingStub stub = ExplanationsGrpc.newBlockingStub(channel);
           
            // Send the request and get the response
            ExplanationsResponse response = stub.getExplanation(request);
            visualExplainabilityResults.setData("xi: " + response.getPdp2DXi() + ", yi: " + response.getPdp2DYi()+", zi: " + response.getPdp2DZi());

    
            // Print the response
            
            // Shutdown the channel
            channel.shutdown();
        }
        
        return visualExplainabilityResults;
    }
    
    public VisualExplainabilityResults getPipelineExplainabilityAleData(VisualExplainabilityPipelinePdpQuery visualExplainabilityQuery) {
        VisualExplainabilityResults visualExplainabilityResults = new VisualExplainabilityResults();
        String feature = visualExplainabilityQuery.getPipelinePdpParameters().getFeature();
        
        // Check if the feature is null
        if (feature == null) {
            // System.out.println("Feature is null");
            visualExplainabilityResults.setMessage("400");
        } else {
            visualExplainabilityResults.setMessage("200");
            System.out.println("Sending gRPC request to server...");
    
            // Establish gRPC channel
            ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext() // Use plaintext (non-TLS) communication
                .build();
           
            // Create a request message
            ExplanationsRequest request = ExplanationsRequest.newBuilder()
                    .setExplanationMethod("ALEPlots")
                    .setExplanationType("Pipeline")
                    .setModel(visualExplainabilityQuery.getModelId())
                    .setFeature1(feature) // Use the extracted feature
                    .build();
           
            // Create a blocking stub for the service
            ExplanationsGrpc.ExplanationsBlockingStub stub = ExplanationsGrpc.newBlockingStub(channel);
           
            // Send the request and get the response
            ExplanationsResponse response = stub.getExplanation(request);
            visualExplainabilityResults.setData("ale results : " + response.getAleData() );

            
    
            // Print the response
            System.out.println("ale: " + response.getAleData());
    
            // Shutdown the channel
            channel.shutdown();
        }
        
        return visualExplainabilityResults;
    }

    public VisualExplainabilityResults getPipelineExplainabilityCounterFData(VisualExplainabilityPipelinePdpQuery visualExplainabilityQuery) {
        VisualExplainabilityResults visualExplainabilityResults = new VisualExplainabilityResults();
        String feature = visualExplainabilityQuery.getPipelinePdpParameters().getFeature();
        
        if (feature == null) {
            // Log if feature is null
            // System.out.println("Feature is null");
            visualExplainabilityResults.setMessage("400");
        } else {
            visualExplainabilityResults.setMessage("200");
            System.out.println("Sending gRPC request to server...");
    
            // Establish gRPC channel
            ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext() // Use plaintext (non-TLS) communication
                .build();
           
            // Create a request message
            ExplanationsRequest request = ExplanationsRequest.newBuilder()
                    .setExplanationMethod("CounterfactualExplanations")
                    .setExplanationType("Pipeline")
                    .setModel(visualExplainabilityQuery.getModelId())
                    // .setFeature1(feature) // Optionally set the feature if needed
                    .build();
            
            // Create a blocking stub for the service
            ExplanationsGrpc.ExplanationsBlockingStub stub = ExplanationsGrpc.newBlockingStub(channel);
           
            // Send the request and get the response
            ExplanationsResponse response = stub.getExplanation(request);
            visualExplainabilityResults.setData("CounterF " + response.getCfs() );

    
            // Print the response
    
            // Shutdown the channel
            channel.shutdown();
        }
    
        return visualExplainabilityResults;
    }
   
    public VisualExplainabilityResults getPipelineExplainabilityInfluenceData(VisualExplainabilityPipelinePdpQuery visualExplainabilityQuery) {
        VisualExplainabilityResults visualExplainabilityResults = new VisualExplainabilityResults();
        String feature = visualExplainabilityQuery.getPipelinePdpParameters().getFeature();
    
        if (feature == null) {
            // Log if feature is null
            // System.out.println("Feature is null");
            visualExplainabilityResults.setMessage("400");
        } else {
            visualExplainabilityResults.setMessage("200");
            System.out.println("Sending gRPC request to server...");
    
            try {
                // Establish gRPC channel
                ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                    .usePlaintext() // Use plaintext (non-TLS) communication
                    .build();
                
                // Create a request message
                ExplanationsRequest request = ExplanationsRequest.newBuilder()
                        .setExplanationMethod("InfluenceFunctions")
                        .setExplanationType("Pipeline")
                        .setModel(visualExplainabilityQuery.getModelId())
                        .setNumInfluential(Integer.parseInt(feature)) // Parse feature to int
                        .build();
                
                // Create a blocking stub for the service
                ExplanationsGrpc.ExplanationsBlockingStub stub = ExplanationsGrpc.newBlockingStub(channel);
                
                // Send the request and get the response
                ExplanationsResponse response = stub.getExplanation(request);
                visualExplainabilityResults.setData("Posstive Influence: " + response.getPositive()+", Negative Influence: " + response.getNegative());
                channel.shutdown();
            } catch (NumberFormatException e) {
                // Handle number format exception
                System.err.println("Error parsing feature to integer: " + e.getMessage());
                visualExplainabilityResults.setMessage("400");
            } catch (Exception e) {
                // Handle other exceptions
                System.err.println("Error occurred during gRPC request: " + e.getMessage());
                visualExplainabilityResults.setMessage("500");
            }
        }
    
        return visualExplainabilityResults;
    }
       
/*
 * Model XAI Fucntions 
 */

    public VisualExplainabilityResults getModelExplainabilityPdpData(VisualExplainabilityPipelinePdpQuery visualExplainabilityQuery) {
        VisualExplainabilityResults visualExplainabilityResults = new VisualExplainabilityResults();
        String feature = visualExplainabilityQuery.getPipelinePdpParameters().getFeature();
        
        // Check if the feature is null
        if (feature == null) {
            visualExplainabilityResults.setMessage("400");
        } else {
            visualExplainabilityResults.setMessage("200");
            System.out.println("Sending gRPC request to server...");
    
            // Establish gRPC channel
            ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext() // Use plaintext (non-TLS) communication
                .build();
           
            // Create a request message
            ExplanationsRequest request = ExplanationsRequest.newBuilder()
                    .setExplanationMethod("PDPlots")
                    .setExplanationType("Model")
                    .setModel(visualExplainabilityQuery.getModelId())
                    .setFeature1(feature) // Use the extracted feature
                    .build();
           
            // Create a blocking stub for the service
            ExplanationsGrpc.ExplanationsBlockingStub stub = ExplanationsGrpc.newBlockingStub(channel);
           
            // Send the request and get the response
            ExplanationsResponse response = stub.getExplanation(request);
            visualExplainabilityResults.setData("Values: " + response.getPdpVals() + ", Effect: " + response.getPdpEffect());
            // Shutdown the channel
            channel.shutdown();
        }
    
        return visualExplainabilityResults;
    }
    
    public VisualExplainabilityResults getModelExplainabilityAleData(VisualExplainabilityPipelinePdpQuery visualExplainabilityQuery) {
        VisualExplainabilityResults visualExplainabilityResults = new VisualExplainabilityResults();
        String feature = visualExplainabilityQuery.getPipelinePdpParameters().getFeature();
        
        // Check if the feature is null
        if (feature == null) {
            // Log when feature is null
            // System.out.println("Feature is null");
            visualExplainabilityResults.setMessage("400");
        } else {
            visualExplainabilityResults.setMessage("200");
            System.out.println("Sending gRPC request to server...");
    
            // Establish gRPC channel
            ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext() // Use plaintext (non-TLS) communication
                .build();
           
            // Create a request message
            ExplanationsRequest request = ExplanationsRequest.newBuilder()
                    .setExplanationMethod("ALEPlots")
                    .setExplanationType("Model")
                    .setModel(visualExplainabilityQuery.getModelId())
                    .setFeature1(feature) // Use the extracted feature
                    .build();
           
            // Create a blocking stub for the service
            ExplanationsGrpc.ExplanationsBlockingStub stub = ExplanationsGrpc.newBlockingStub(channel);
           
            // Send the request and get the response
            ExplanationsResponse response = stub.getExplanation(request);
            visualExplainabilityResults.setData("Ale: " + response.getAleData());

    
            // Print the response
            System.out.println("Response received: " + response.getAleData());
    
            // Shutdown the channel
            channel.shutdown();
        }
        
        return visualExplainabilityResults;
    }
    
    public VisualExplainabilityResults getModelExplainability2DPdpData(VisualExplainabilityPipeline2DPdpQuery visualExplainabilityQuery) {
        VisualExplainabilityResults visualExplainabilityResults = new VisualExplainabilityResults();
        String feature1 = visualExplainabilityQuery.getPipelinePdpParameters().getFeature1();
        String feature2 = visualExplainabilityQuery.getPipelinePdpParameters().getFeature2();
        
        // Check if either feature1 or feature2 is null
        if (feature1 == null || feature2 == null) {
            // Log when either feature1 or feature2 is null
            // System.out.println("Feature1 or Feature2 is null");
            visualExplainabilityResults.setMessage("400");
        } else {


            visualExplainabilityResults.setMessage("200");
            System.out.println("Sending gRPC request to server...");

            // Establish gRPC channel
            ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext() // Use plaintext (non-TLS) communication
                .build();
           
            // Create a request message
            ExplanationsRequest request = ExplanationsRequest.newBuilder()
                    .setExplanationMethod("2D_PDPlots")
                    .setExplanationType("Model")
                    .setModel(visualExplainabilityQuery.getModelId())
                    .setFeature1(feature1) // Use the extracted feature1
                    .setFeature2(feature2) // Use the extracted feature2
                    .build();
            // Create a blocking stub for the service
            ExplanationsGrpc.ExplanationsBlockingStub stub = ExplanationsGrpc.newBlockingStub(channel);
            // Send the request and get the response

            ExplanationsResponse response = stub.getExplanation(request);
            // Print the response
            System.out.println("Response received: " + response);
            // Shutdown the channel
            channel.shutdown();
        }
        return visualExplainabilityResults;
    }
}
